# Generated by Django 3.0.6 on 2020-11-18 16:45

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('django_celery_beat', '0012_periodictask_expire_seconds'),
    ]

    operations = [
        migrations.CreateModel(
            name='Evaluator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=15, unique=True, verbose_name='Name of evaluator')),
                ('class_name', models.CharField(max_length=50, verbose_name='Python class to call')),
                ('kwargs', models.CharField(blank=True, max_length=50, null=True, verbose_name='JSON encoded kwargs to pass to constructor')),
            ],
        ),
        migrations.CreateModel(
            name='Sensor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('good', models.BooleanField(blank=True, null=True, verbose_name='Whether its current value was evaluated as good')),
                ('since', models.DateTimeField(blank=True, null=True, verbose_name='Time the good parameter last changed')),
                ('delay_good', models.IntegerField(default=0, verbose_name='Delay in seconds before switching to good weather')),
                ('delay_bad', models.IntegerField(default=0, verbose_name='Delay in seconds before switching to bad weather')),
                ('bad_since', models.DateTimeField(blank=True, null=True, verbose_name='Time of last bad sensor value')),
                ('good_since', models.DateTimeField(blank=True, null=True, verbose_name='Time of last good sensor value')),
                ('average', models.BooleanField(default=True, verbose_name='Whether or not to use this in average')),
                ('evaluators', models.ManyToManyField(blank=True, to='weather.Evaluator')),
            ],
        ),
        migrations.CreateModel(
            name='SensorType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=10, unique=True, verbose_name='Code for sensor type')),
                ('name', models.CharField(max_length=50, verbose_name='Name of sensor type')),
                ('unit', models.CharField(max_length=10, verbose_name='Unit for value')),
                ('average', models.BooleanField(default=True, verbose_name='Calculate average for this type')),
            ],
        ),
        migrations.CreateModel(
            name='Value',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(db_index=True, verbose_name='Date and time when value was measured')),
                ('value', models.FloatField(blank=True, null=True, verbose_name='Measured value')),
                ('sensor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='weather.Sensor')),
            ],
        ),
        migrations.CreateModel(
            name='Station',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=10, unique=True, verbose_name='Code for weather station')),
                ('name', models.CharField(max_length=50, verbose_name='Name of weather station')),
                ('class_name', models.CharField(max_length=100, verbose_name='Name of Python class to handle station')),
                ('kwargs', models.TextField(default='{}', verbose_name='JSON encoded kwargs used when instantiating Python class')),
                ('weight', models.FloatField(default=1, verbose_name='Weight for station in global average')),
                ('history', models.BooleanField(default=True, verbose_name='Whether to keep more than one point')),
                ('active', models.BooleanField(default=True, verbose_name='Whether station is currently active')),
                ('color', models.CharField(default='rgba(0, 0, 0, 0.1)', max_length=20, verbose_name='Plot color')),
                ('crontab', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='django_celery_beat.CrontabSchedule')),
                ('interval', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='django_celery_beat.IntervalSchedule')),
            ],
        ),
        migrations.AddField(
            model_name='sensor',
            name='station',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='weather.Station'),
        ),
        migrations.AddField(
            model_name='sensor',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='weather.SensorType'),
        ),
        migrations.AlterUniqueTogether(
            name='sensor',
            unique_together={('station', 'type')},
        ),
    ]
